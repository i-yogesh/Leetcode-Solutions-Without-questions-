/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* solve(ListNode* list1, ListNode* list2)
    {
         ListNode dummy(INT_MIN);
        ListNode *answer = &dummy;
        
        ListNode* ans = answer;
        while(list1!=NULL && list2!=NULL)
        {
            if(list1->val < list2->val)
            {
                ans->next = list1;
                
                ans = list1;
                list1 = list1->next;
            }
            else
            {
                ans->next = list2;
               
                ans = list2;
                 list2 = list2->next;
            }
        }
        
        while(list1!=NULL)
            {
                ans->next = list1;
                
                ans = list1;
                list1 = list1->next;
            }
            while(list2!=NULL)
            {
                ans->next = list2;
               
                ans = list2;
                 list2 = list2->next;
            }
        // ans = ans->next;
        return answer->next;
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
            return NULL;
        
        while(lists.size() > 1)
        {
            lists.push_back(solve(lists[0], lists[1]));
            lists.erase(lists.begin());
            lists.erase(lists.begin());
        }
        return lists[0];
    }
};
