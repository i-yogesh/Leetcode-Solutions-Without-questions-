class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int count = 0;
        vector<pair<int, int>> vp;
        for(int i =0 ; i<mat.size(); i++)
        {
            count = 0;
            for(int j = 0; j <mat[0].size(); j++)
            {
                if(mat[i][j] == 1)
                    count++;
            }
            vp.push_back({count, i});
        }
        
        sort(vp.begin(), vp.end());
        vector<int> ans;
        for(int i = 0 ; i<k && i+1 < vp.size(); i++)
        {
            if(vp[i].first == vp[i+1].first)
            {
                if(vp[i].second > vp[i+1].second)
                    ans.push_back(vp[i+1].second);
                else
                    ans.push_back(vp[i].second);
            }
            else
            ans.push_back(vp[i].second);
            
            if(k == vp.size() && i == k-2)
                ans.push_back(vp[k-1].second);
        }
        return ans;
    }
};
